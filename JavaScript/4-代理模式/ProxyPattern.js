/**
 * 我们有一个图片加载系统，图片可能非常大，直接加载会导致性能问题。
 * 我们可以使用代理模式来实现 延迟加载：只有在真正需要显示图片时，才加载图片。
 * 
 * 应用场景：
 * 延迟加载，如图片、视频等大资源的加载。
 * 权限控制，在访问敏感对象前进行权限校验。
 * 缓存，为耗时的操作（如网络请求）提供缓存功能。
 * 日志记录，在访问对象前后记录日志。
 * 
 * 代理模式 其实就是在访问对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途
 */


/** 导入图片类 */
const { ProxyImage } = require("./Image");


// 使用示例
const image = new ProxyImage("large_image.jpg");

// 第一次显示图片（此时会加载图片）
image.display();
// 输出:
// 加载图片: large_image.jpg
// 显示图片: large_image.jpg

// 第二次显示图片（直接从缓存中显示，无需重新加载）
image.display();
// 输出:
// 显示图片: large_image.jpg