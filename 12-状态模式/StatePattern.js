/**
 * 一个交通信号灯系统，信号灯有三种状态：红灯、黄灯 和 绿灯。
 * 每种状态下信号灯的行为不同（如显示颜色、切换时间等）。
 * 使用 状态模式 可以将每种状态封装为一个类，并通过上下文类管理状态的切换。
 * 
 * 核心思想：
 * 封装状态：将每种状态封装为一个类，状态的行为由类的方法实现。
 * 状态切换：通过上下文类管理状态的切换，客户端无需关心具体的状态实现。
 * 解耦：将状态的行为与上下文类解耦，易于扩展和维护。
 * 
 * 适用场景：
 * 状态多且复杂：当对象有多种状态，且每种状态的行为不同时。
 * 状态切换频繁：当状态切换逻辑复杂，且需要动态调整时。
 * 避免条件语句：当需要避免大量的 if-else 或 switch-case 语句时。
 */

/** 导入信号灯类 */
const { TrafficLight} = require('./TrafficLight');


// 使用示例

// 创建交通信号灯
const trafficLight = new TrafficLight();

// 启动信号灯
trafficLight.start();

// 输出:
// 红灯亮起，等待 10 秒
// （10 秒后）
// 绿灯亮起，等待 15 秒
// （15 秒后）
// 黄灯亮起，等待 5 秒
// （5 秒后）
// 红灯亮起，等待 10 秒
// ...